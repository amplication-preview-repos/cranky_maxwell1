/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TradingPair as PrismaTradingPair,
  Order as PrismaOrder,
} from "@prisma/client";

export class TradingPairServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TradingPairCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tradingPair.count(args);
  }

  async tradingPairs(
    args: Prisma.TradingPairFindManyArgs
  ): Promise<PrismaTradingPair[]> {
    return this.prisma.tradingPair.findMany(args);
  }
  async tradingPair(
    args: Prisma.TradingPairFindUniqueArgs
  ): Promise<PrismaTradingPair | null> {
    return this.prisma.tradingPair.findUnique(args);
  }
  async createTradingPair(
    args: Prisma.TradingPairCreateArgs
  ): Promise<PrismaTradingPair> {
    return this.prisma.tradingPair.create(args);
  }
  async updateTradingPair(
    args: Prisma.TradingPairUpdateArgs
  ): Promise<PrismaTradingPair> {
    return this.prisma.tradingPair.update(args);
  }
  async deleteTradingPair(
    args: Prisma.TradingPairDeleteArgs
  ): Promise<PrismaTradingPair> {
    return this.prisma.tradingPair.delete(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.tradingPair
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }
}
